tabItem(tabName = "sources",
fluidRow(rHandsontableOutput("adding_sources_table")),
fluidRow(
textInput(inputId = "source_insert_name", label= "Insert name", value=""),
actionButton(label="save",inputId="save_source"),
# Restart the shiny session
tags$a(href="javascript:history.go(0)",
popify(tags$i(class="fa fa-refresh fa-5x"),
title = "Reload",
content = "Click here to restart the Shiny session",
placement = "right"))
)
),
tabItem(tabName = "ingredients",
fluidRow(rHandsontableOutput("adding_ingredients_table")),
fluidRow(
textInput(inputId = "ingredient_insert_name", label= "Insert name", value=""),
actionButton(label="save", inputId = "save_ingredient"),
# Restart the shiny session
tags$a(href="javascript:history.go(0)",
popify(tags$i(class="fa fa-refresh fa-5x"),
title = "Reload",
content = "Click here to restart the Shiny session",
placement = "right"))
)
)
)
)
)
server <- function(input, output, session) {
#### PREPARING DATA _____________________________________________####
# Connect to databse
mydb <- reactive({
mydb = dbConnect(MySQL(), user=user, password=password,
dbname=dbname, host=host, port=port)
})
# RecipeS
recipes<- reactive({
recipes = fetch(dbSendQuery(mydb(), "select * from recipes"))
})
# Sources
sources<- reactive({
sources = fetch(dbSendQuery(mydb(), "select * from sources"))
})
# Ingredients
ingredients<- reactive({
ingredients = fetch(dbSendQuery(mydb(), "select * from ingredients"))
})
#### OUTPUTS ____________________________________________________________####
# Showing the exploring section
output$exploring = renderRHandsontable({
rhandsontable(recipes())
})
# Showing the adding section for recipes
output$adding_recipes_table = renderRHandsontable({
rhandsontable(recipes())
})
# Showing the adding section for sources
output$adding_sources_table = renderRHandsontable({
rhandsontable(sources())
})
# Showing the adding section for ingredients
output$adding_ingredients_table = renderRHandsontable({
rhandsontable(ingredients())
})
# Saving the changes with the save_recipes button
observeEvent(input$save_recipe,{
id_sources= sources$id[sources$name==input$recipe_select_source]
newline<- data.frame(name=input$recipe_insert_name,
id_sources=id_sources,
url=input$recipe_insert_url,
minutes= input$recipe_insert_time,
temperature=input$recipe_select_temp)
mydb = mydb()
DBI::dbWriteTable(mydb, name="recipes", value=newline, append=TRUE,
row.names = FALSE)
})
# Saving the changes with the save_sources button
observeEvent(input$save_source,{
newline<- data.frame(name=input$source_insert_name)
mydb = mydb()
DBI::dbWriteTable(mydb, name="sources", value=newline, append=TRUE,
row.names = FALSE)
updateSelectInput(session, "recipe_select_source",
choices= c(as.list(fetch(dbSendQuery(mydb, "select name from sources")))[[1]]))
})
# Saving the changes with the save_sources button
observeEvent(input$save_ingredient,{
newline<- data.frame(name=input$ingredient_insert_name)
mydb = mydb()
DBI::dbWriteTable(mydb, name="ingredients", value=newline, append=TRUE,
row.names = FALSE)
})
}
shinyApp(ui, server)
output$nText <- renderText({
input$n
})
ui <- fluidPage(
pageWithSidebar(
headerPanel("actionButton test"),
sidebarPanel(
numericInput("n", "N:", min = 0, max = 100, value = 50),
br(),
actionButton("goButton", "Go!"),
p("Click the button to update the value displayed in the main panel."),
actionButton("newButton", "New Button"),
actionButton("newButton2", "Another New Button")
),
mainPanel(
uiOutput("all")
)
)
)
server <- function(input, output, session) {
global <- reactiveValues(out = NULL)
observeEvent(input$goButton, {
global$out <- verbatimTextOutput("nText")
})
observeEvent(input$newButton, {
global$out <- textOutput("some_text_description")
})
observeEvent(input$newButton2, {
global$out <- plotOutput("some_plot")
})
output$all <- renderUI({
global$out
})
output$nText <- renderText({
input$n
})
output$some_text_description <- renderText({
"Lorem ipsum dolorom."
})
# Simple Bar Plot
output$some_plot <- renderPlot({
counts <- table(mtcars$gear)
barplot(counts, main="Car Distribution", xlab="Number of Gears")
})
}
shinyApp(ui = ui, server = server)
v
server <- function(input, output, session) {
#### PREPARING DATA _____________________________________________####
# Connect to databse
mydb <- reactive({
mydb = dbConnect(MySQL(), user=user, password=password,
dbname=dbname, host=host, port=port)
})
# RecipeS
recipes<- reactive({
recipes = fetch(dbSendQuery(mydb(), "select * from recipes"))
})
# Sources
sources<- reactive({
sources = fetch(dbSendQuery(mydb(), "select * from sources"))
})
# Ingredients
ingredients<- reactive({
ingredients = fetch(dbSendQuery(mydb(), "select * from ingredients"))
})
#### OUTPUTS ____________________________________________________________####
# Showing the exploring section
output$exploring = renderRHandsontable({
rhandsontable(recipes())
})
# Showing the adding section for recipes
output$adding_recipes_table = renderRHandsontable({
rhandsontable(recipes())
})
# Showing the adding section for sources
output$adding_sources_table = renderRHandsontable({
rhandsontable(sources())
})
# Showing the adding section for ingredients
output$adding_ingredients_table = renderRHandsontable({
rhandsontable(ingredients())
})
# Saving the changes with the save_recipes button
observeEvent(input$save_recipe,{
id_sources= sources$id[sources$name==input$recipe_select_source]
newline<- data.frame(name=input$recipe_insert_name,
id_sources=id_sources,
url=input$recipe_insert_url,
minutes= input$recipe_insert_time,
temperature=input$recipe_select_temp)
mydb = mydb()
DBI::dbWriteTable(mydb, name="recipes", value=newline, append=TRUE,
row.names = FALSE)
})
# Saving the changes with the save_sources button
observeEvent(input$save_source,{
newline<- data.frame(name=input$source_insert_name)
mydb = mydb()
DBI::dbWriteTable(mydb, name="sources", value=newline, append=TRUE,
row.names = FALSE)
updateSelectInput(session, "recipe_select_source",
choices= c(as.list(fetch(dbSendQuery(mydb, "select name from sources")))[[1]]))
proxy=fetch(dbSendQuery(mydb(), "select * from sources"))
replaceData(proxy,sources())
})
# Saving the changes with the save_sources button
observeEvent(input$save_ingredient,{
newline<- data.frame(name=input$ingredient_insert_name)
mydb = mydb()
DBI::dbWriteTable(mydb, name="ingredients", value=newline, append=TRUE,
row.names = FALSE)
})
}
shinyApp(ui, server)
runApp('scripts/CRUD_app_shiny.R')
server <- function(input, output, session) {
#### PREPARING DATA _____________________________________________####
# Connect to databse
mydb <- reactive({
mydb = dbConnect(MySQL(), user=user, password=password,
dbname=dbname, host=host, port=port)
})
# RecipeS
recipes<- reactive({
recipes = fetch(dbSendQuery(mydb(), "select * from recipes"))
})
# Sources
sources<- reactive({
sources = fetch(dbSendQuery(mydb(), "select * from sources"))
})
# Ingredients
ingredients<- reactive({
ingredients = fetch(dbSendQuery(mydb(), "select * from ingredients"))
})
#### OUTPUTS ____________________________________________________________####
# Showing the exploring section
output$exploring = renderRHandsontable({
rhandsontable(recipes())
})
# Showing the adding section for recipes
output$adding_recipes_table = renderRHandsontable({
rhandsontable(recipes())
})
# Showing the adding section for sources
output$adding_sources_table = renderRHandsontable({
rhandsontable(sources())
})
# Showing the adding section for ingredients
output$adding_ingredients_table = renderRHandsontable({
rhandsontable(ingredients())
})
# Saving the changes with the save_recipes button
observeEvent(input$save_recipe,{
id_sources= sources$id[sources$name==input$recipe_select_source]
newline<- data.frame(name=input$recipe_insert_name,
id_sources=id_sources,
url=input$recipe_insert_url,
minutes= input$recipe_insert_time,
temperature=input$recipe_select_temp)
mydb = mydb()
DBI::dbWriteTable(mydb, name="recipes", value=newline, append=TRUE,
row.names = FALSE)
})
# Saving the changes with the save_sources button
observeEvent(input$save_source,{
newline<- data.frame(name=input$source_insert_name)
mydb = mydb()
DBI::dbWriteTable(mydb, name="sources", value=newline, append=TRUE,
row.names = FALSE)
updateSelectInput(session, "recipe_select_source",
choices= c(as.list(fetch(dbSendQuery(mydb, "select name from sources")))[[1]]))
adding_sources_table(fetch(dbSendQuery(mydb(), "select * from sources")))
})
# Saving the changes with the save_sources button
observeEvent(input$save_ingredient,{
newline<- data.frame(name=input$ingredient_insert_name)
mydb = mydb()
DBI::dbWriteTable(mydb, name="ingredients", value=newline, append=TRUE,
row.names = FALSE)
})
}
shinyApp(ui, server)
pacman::p_load(rstudioapi,dplyr, ggplot2, lubridate, randomForest, caret,
rpart,rpart.plot,tidyr, shiny, shinydashboard, rvest, DT,
ggthemes,RMySQL,rhandsontable,data.table,shinyjs,DBI, shinyBS)
# Setwd (set current wd where is the script, then we move back to the
# general folder)
current_path = getActiveDocumentContext()$path
setwd(dirname(current_path))
setwd("..")
rm(current_path)
#### 1.   PREPARING DATA: SQL _____________________________________________ ####
source("./scripts/credentials.R")
mydb = dbConnect(MySQL(), user=user, password=password,
dbname=dbname, host=host, port=port)
dbListTables(mydb)
recipes = fetch(dbSendQuery(mydb, "select * from recipes"))
ui <- dashboardPage(
dashboardHeader(title = "Playig with the database"),
# Sidebar
dashboardSidebar(
sidebarMenu(
menuItem("Exploring", tabName = "exploring", icon =icon("table")),
menuItem("Adding", tabName = "adding", icon =icon("plus-circle"),
startExpanded = TRUE,
menuSubItem("recipes", tabName = "recipes"),
menuSubItem("sources", tabName = "sources"),
menuSubItem("ingredients", tabName = "ingredients")
)
)
),
dashboardBody(
tabItems(
tabItem(tabName = "exploring",
column(12,
title = "",rHandsontableOutput("exploring"))),
tabItem(tabName = "recipes",
fluidRow(rHandsontableOutput("adding_recipes_table")),
fluidRow(
column(6,
textInput(inputId = "recipe_insert_name", label= "Insert name", value=""),
selectInput(inputId = "recipe_select_source", label= "Insert source",
choices= c(as.list(fetch(dbSendQuery(mydb, "select name from sources")))[[1]])),
textInput(inputId = "recipe_insert_url", label= "Insert url", value="")
),
column(6,
numericInput(inputId = "recipe_insert_time", label="Insert time", value=""),
selectInput(inputId = "recipe_select_temp", label= "Insert source",
choices = c("fria", "caliente")),
selectizeInput(inputId = "recipe_select_ingred",
label= "Insert main ingredients",
choices= c(as.list(fetch(dbSendQuery(mydb, "select name from ingredients")))[[1]]),
selected = NULL,
multiple = TRUE)
)
),
fluidRow(
column(6,
actionButton(label="save",inputId = "save_recipe")
),
column(6,
# Restart the shiny session
tags$a(href="javascript:history.go(0)",
popify(tags$i(class="fa fa-refresh fa-5x"),
title = "Reload",
content = "Click here to restart the Shiny session",
placement = "right"))
)
)
),
tabItem(tabName = "sources",
fluidRow(rHandsontableOutput("adding_sources_table")),
fluidRow(
textInput(inputId = "source_insert_name", label= "Insert name", value=""),
actionButton(label="save",inputId="save_source"),
# Restart the shiny session
tags$a(href="javascript:history.go(0)",
popify(tags$i(class="fa fa-refresh fa-5x"),
title = "Reload",
content = "Click here to restart the Shiny session",
placement = "right"))
)
),
tabItem(tabName = "ingredients",
fluidRow(rHandsontableOutput("adding_ingredients_table")),
fluidRow(
textInput(inputId = "ingredient_insert_name", label= "Insert name", value=""),
actionButton(label="save", inputId = "save_ingredient"),
# Restart the shiny session
tags$a(href="javascript:history.go(0)",
popify(tags$i(class="fa fa-refresh fa-5x"),
title = "Reload",
content = "Click here to restart the Shiny session",
placement = "right"))
)
)
)
)
)
server <- function(input, output, session) {
#### PREPARING DATA _____________________________________________####
# Connect to databse
mydb <- reactive({
mydb = dbConnect(MySQL(), user=user, password=password,
dbname=dbname, host=host, port=port)
})
# RecipeS
recipes<- reactive({
recipes = fetch(dbSendQuery(mydb(), "select * from recipes"))
})
# Sources
sources<- reactive({
sources = fetch(dbSendQuery(mydb(), "select * from sources"))
})
# Ingredients
ingredients<- reactive({
ingredients = fetch(dbSendQuery(mydb(), "select * from ingredients"))
})
#### OUTPUTS ____________________________________________________________####
# Showing the exploring section
output$exploring = renderRHandsontable({
rhandsontable(recipes())
})
# Showing the adding section for recipes
output$adding_recipes_table = renderRHandsontable({
rhandsontable(recipes())
})
# Showing the adding section for sources
output$adding_sources_table = renderRHandsontable({
rhandsontable(sources())
})
# Showing the adding section for ingredients
output$adding_ingredients_table = renderRHandsontable({
rhandsontable(ingredients())
})
# Saving the changes with the save_recipes button
observeEvent(input$save_recipe,{
id_sources= sources$id[sources$name==input$recipe_select_source]
newline<- data.frame(name=input$recipe_insert_name,
id_sources=id_sources,
url=input$recipe_insert_url,
minutes= input$recipe_insert_time,
temperature=input$recipe_select_temp)
mydb = mydb()
DBI::dbWriteTable(mydb, name="recipes", value=newline, append=TRUE,
row.names = FALSE)
})
# Saving the changes with the save_sources button
observeEvent(input$save_source,{
newline<- data.frame(name=input$source_insert_name)
mydb = mydb()
DBI::dbWriteTable(mydb, name="sources", value=newline, append=TRUE,
row.names = FALSE)
updateSelectInput(session, "recipe_select_source",
choices= c(as.list(fetch(dbSendQuery(mydb, "select name from sources")))[[1]]))
adding_sources_table(fetch(dbSendQuery(mydb(), "select * from sources")))
})
# Saving the changes with the save_sources button
observeEvent(input$save_ingredient,{
newline<- data.frame(name=input$ingredient_insert_name)
mydb = mydb()
DBI::dbWriteTable(mydb, name="ingredients", value=newline, append=TRUE,
row.names = FALSE)
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
#### PREPARING DATA _____________________________________________####
# Connect to databse
mydb <- reactive({
mydb = dbConnect(MySQL(), user=user, password=password,
dbname=dbname, host=host, port=port)
})
# RecipeS
recipes<- reactive({
recipes = fetch(dbSendQuery(mydb(), "select * from recipes"))
})
# Sources
sources<- reactive({
sources = fetch(dbSendQuery(mydb(), "select * from sources"))
})
# Ingredients
ingredients<- reactive({
ingredients = fetch(dbSendQuery(mydb(), "select * from ingredients"))
})
#### OUTPUTS ____________________________________________________________####
# Showing the exploring section
output$exploring = renderRHandsontable({
rhandsontable(recipes())
})
# Showing the adding section for recipes
output$adding_recipes_table = renderRHandsontable({
rhandsontable(recipes())
})
# Showing the adding section for sources
output$adding_sources_table = renderRHandsontable({
rhandsontable(sources())
})
# Showing the adding section for ingredients
output$adding_ingredients_table = renderRHandsontable({
rhandsontable(ingredients())
})
# Saving the changes with the save_recipes button
observeEvent(input$save_recipe,{
id_sources= sources$id[sources$name==input$recipe_select_source]
newline<- data.frame(name=input$recipe_insert_name,
id_sources=id_sources,
url=input$recipe_insert_url,
minutes= input$recipe_insert_time,
temperature=input$recipe_select_temp)
mydb = mydb()
DBI::dbWriteTable(mydb, name="recipes", value=newline, append=TRUE,
row.names = FALSE)
})
# Saving the changes with the save_sources button
observeEvent(input$save_source,{
newline<- data.frame(name=input$source_insert_name)
mydb = mydb()
DBI::dbWriteTable(mydb, name="sources", value=newline, append=TRUE,
row.names = FALSE)
updateSelectInput(session, "recipe_select_source",
choices= c(as.list(fetch(dbSendQuery(mydb, "select name from sources")))[[1]]))
sources(fetch(dbSendQuery(mydb(), "select * from sources")))
})
# Saving the changes with the save_sources button
observeEvent(input$save_ingredient,{
newline<- data.frame(name=input$ingredient_insert_name)
mydb = mydb()
DBI::dbWriteTable(mydb, name="ingredients", value=newline, append=TRUE,
row.names = FALSE)
})
}
shinyApp(ui, server)
runApp('scripts/CRUD_app_shiny.R')
runApp('scripts/CRUD_app_shiny.R')
runApp('scripts/CRUD_app_shiny.R')
